Clang Warn-Globals Plugin
=========================

   John Carmack:
     "It is scary to look in some old code that hasnâ€™t been touched in
     years, and see a completely non-thread-safe static global variable
     used"
   https://twitter.com/ID_AA_Carmack/status/339406631613890560

   Jonathan Blow:
     "I wonder if it's worth hacking 'static storage for variables
     without some naming prefix is an error' into LLVM as a test."
   https://twitter.com/Jonathan_Blow/status/339425024765206528

This is the result.

What it does
------------

  Currently, the plugin has no options.  It generates a warning
  diagnostic for each non-const global declaration, excluding
  declarations from system headers.

Missing Features
----------------

  Features that the plugin should (but doesn't) have:

    * Look for a pragma to enable or disable the diagnostic
      (this could be a normal Clang diagnostic-control pragma).

    * Suppress warnings for globals of "special" types, e.g.,
      std::atomic<*>, or thread-local globals.

    * Suppress warnings for globals whose name matches some
      regular expression.

Building the plugin
-------------------

  Currently only tested on Linux, with Clang 3.2.

  Use llvm-config to get the required compiler and linker flags:

      llvm-config --cflags --ldflags

  Build as a shared library (-shared) Link to libclang.so
  (-L /usr/lib/llvm/ -lclang)

Using the plugin
----------------

  To register the plugin for use during compilation, you need to pass
  arguments to cc1:

    -load /path/to/warnglobals.so -add-plugin warn-globals

  Assuming you're using the clang or clang++ drivers, you need to escape
  each of those args with -Xclang, so you get:

    -Xclang -load -Xclang /path/to/warnglobals.so -Xclang -add-plugin
    -Xclang warn-globals
